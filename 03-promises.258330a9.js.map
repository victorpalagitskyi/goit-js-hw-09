{"mappings":"gfAAAA,EAAA,SACaC,SAASC,cAAc,SAApC,IACMC,EAAQF,SAASC,cAAc,kBAC/BE,EAAOH,SAASC,cAAc,iBAC9BG,EAASJ,SAASC,cAAc,mBAkCtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAGpBG,EAAO,Q,GAER,I,IA3CQV,SAASC,cAAc,UAC/Be,iBAAiB,SACxB,SAAoBC,GAClBA,EAAEC,iBAMF,SAAiBC,EAAOC,EAAMC,GAC5B,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDjB,EAAciB,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALT,MAClBW,SAASC,OAAOC,QACb,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,MAC3C,CACDK,QAAS,K,IAIdC,OAAM,SAAAP,G,IAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALT,MACnBW,SAASC,OAAOK,QACb,sBAAqCH,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,MAC1C,CACCK,QAAS,K,IAIjBX,GAASC,C,CAxBba,CACEC,OAAOhC,EAAMiC,OACbD,OAAO/B,EAAKgC,OACZD,OAAO9B,EAAO+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector(\".form\")\nconst delay = document.querySelector('[name=\"delay\"]')\nconst step = document.querySelector('[name=\"step\"]')\nconst amount = document.querySelector('[name=\"amount\"]')\nconst button = document.querySelector(\"button\")\nbutton.addEventListener(\"click\", startCrPr)\nfunction startCrPr (e)  { \n  e.preventDefault();\n  getData(\n    Number(delay.value),\n    Number(step.value),\n    Number(amount.value)\n  );\n  function getData(delay, step, amount) {\n    for (let position = 1; position <= amount; position += 1) {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n         Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`,\n             {\n              timeout: 2000,\n            }\n          )\n        })\n        .catch(({ position, delay }) => {\n         Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`,\n             {\n              timeout: 2000,\n            }\n          )\n        })\n      delay += step;\n    }\n  }\n  }\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      }\n      else {\n        reject(\"Error\")\n      }\n    }, 2000)\n  })\n}\n"],"names":["parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay2","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","preventDefault","delay1","step1","amount1","position1","then","param","_$delay","Notiflix","Notify","success","concat","timeout","catch","failure","getData","Number","value"],"version":3,"file":"03-promises.258330a9.js.map"}